<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java学习路线</title>
    <link href="/2020/06/22/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <url>/2020/06/22/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<ul><li>Java<ul><li>基础<ul><li>thinking in java(完成一半)</li><li>Java核心技术(已完成)</li></ul></li><li>并发<ul><li>JAVA并发编程实践(已完成)</li><li>Java并发编程的艺术</li></ul></li><li>JVM<ul><li>深入理解Java虚拟机_JVM高级特性与最佳实践（已完成）</li></ul></li><li>其他<ul><li>Effective Java</li><li>Java性能调优指南</li><li>重构_改善既有代码的设计</li></ul></li></ul></li><li>网络<ul><li>图解HTTP</li><li>图解TCP_IP</li><li>TCP IP详解</li><li>计算机网络</li></ul></li><li>操作系统<ul><li>操作系统导论</li><li>深入理解计算机系统</li><li>鸟哥的Linux私房菜</li></ul></li><li>数据结构与算法<ul><li>算法导论</li><li>算法</li></ul></li><li>数据库<ul><li>数据库系统概念</li><li>MySQL</li><li>Redis</li></ul></li><li>系统设计<ul><li><a href="#常用框架">常用框架</a><ul><li><a href="#springspringboot">Spring</a></li><li><a href="#springboot">SpringBoot</a></li><li><a href="#mybatis">MyBatis</a></li></ul></li><li><a href="#认证授权">认证授权(JWT、SSO)</a></li><li><a href="#分布式">分布式</a><ul><li><a href="#elasticsearch分布式搜索引擎">Elasticsearch(分布式搜索引擎)</a></li><li><a href="#rpc">RPC</a></li><li><a href="#消息队列">消息队列</a></li><li><a href="#api-网关">API 网关</a></li><li><a href="#分布式id">分布式id</a></li><li><a href="#分布式限流">分布式限流</a></li><li><a href="#分布式接口幂等性">分布式接口幂等性</a></li><li><a href="#数据库扩展">数据库扩展</a></li><li><a href="#zookeeper">ZooKeeper</a></li></ul></li><li><a href="#大型网站架构">大型网站架构</a><ul><li><a href="#性能测试">性能测试</a></li><li><a href="#高并发">高并发</a></li><li><a href="#高可用">高可用</a></li></ul></li><li><a href="#微服务">微服务</a><ul><li><a href="#spring-cloud">Spring Cloud</a></li></ul></li></ul></li><li>必会工具<ul><li>Git</li><li>Docker</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>jvm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>梯子搭建</title>
    <link href="/2020/04/15/note/%E6%A2%AF%E5%AD%90%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/04/15/note/%E6%A2%AF%E5%AD%90%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<ul><li><p>依次运行：</p><ul><li><code>wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</code></li><li><code>chmod +x shadowsocksR.sh</code></li><li><code>./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</code></li></ul></li></ul><p><strong>如提示 wget not found ， 请先执行 yum install -y wget</strong></p><ul><li>运行后，会提示你设置端口（port）和密码（password），端口设为 80</li><li>设置完端口和密码后直接回车，让代码自己运行，大概几分钟后运行结束，这时会出现红色字体的配置信息，请务必牢记，最好截图保存，以免遗忘</li><li>SSR 常用命令<pre><code>启动：/etc/init.d/shadowsocks start停止：/etc/init.d/shadowsocks stop重启：/etc/init.d/shadowsocks restart状态：/etc/init.d/shadowsocks status卸载（仅限秋水大大脚本）：./shadowsocksR.sh uninstall</code></pre></li><li><p>SSR 修改密码、配置多端口</p><ul><li>输入 vi /etc/shadowsocks.json</li><li>按“i”进入编辑模式，编辑如下</li></ul><pre><code class="json">  {  “server“: “0.0.0.0“,  “server_ipv6“: “::“,  “local_address“: “127.0.0.1“,  “local_port“: 1081,  “port_password“:{  “端口 1“:“密码 1“,  “端口 2“:“密码 2“,  “端口 3“:“密码 3“,  “端口 4“:“密码 4“  },  “timeout“: 120,  “udp_timeout“: 60,  “method“: “chacha20“,  “protocol“: “auth_sha1_compatible“,  “protocol_param“: ““,  “obfs“: “http_simple_compatible“,  “obfs_param“: ““,  “dns_ipv6“: false,  “connect_verbose_info“: 0,  “redirect“: ““,  “fast_open“: false,  “workers“: 1}</code></pre></li><li><p>按 esc 返回，输入:wq 回车保存</p></li><li>输入<code>/etc/init.d/shadowsocks restart</code> 重启 ssr</li><li>如不能联网，则关闭防火墙（逐条输入）<pre><code>service iptables restartservice iptables stopchkconfig iptables off</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7命令</title>
    <link href="/2020/04/15/note/centos7%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/04/15/note/centos7%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><ul><li>查看防火墙状态<ul><li>firewall-cmd –state</li></ul></li><li>开启防火墙<ul><li>systemctl start firewalld.service</li></ul></li><li>设置开机自启<ul><li>systemctl enable firewalld.service</li></ul></li><li>重启防火墙<ul><li>systemctl restart firewalld.service</li></ul></li><li>开启特定端口<ul><li>firewall-cmd –zone=public –add-port=80/tcp –permanent <ul><li>zone #作用域</li><li>–add-port=80/tcp  #添加端口，格式为：端口/通讯协议</li><li>–permanent   #永久生效，没有此参数重启后失效</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux记录</title>
    <link href="/2020/04/15/note/Linux%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/04/15/note/Linux%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="manjaro-相关"><a href="#manjaro-相关" class="headerlink" title="manjaro 相关"></a>manjaro 相关</h3><ul><li>压缩包乱码：</li></ul><pre><code>sudo pacman -Sy unarchiverunar -e GBK 人员组织机构对应关系表.zip</code></pre><ul><li><p>在终端打开文件夹：<br><code>nautilus .</code></p></li><li><p>使用以下命令，生成可用中国镜像站列表：<br><code>sudo pacman-mirrors -i -c China -m rank</code></p></li><li><p>从远端接受文件:<br><code>scp root@www.runoob.com:/home/root/others/music /home/space/music/1.mp3</code></p></li><li><p>发送文件到远端:</p></li></ul><pre><code>scp local_file remote_username@remote_ip:remote_folder或者scp local_file remote_username@remote_ip:remote_file或者scp local_file remote_ip:remote_folder或者scp local_file remote_ip:remote_file</code></pre>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象设计的六大设计原则</title>
    <link href="/2019/08/15/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <url>/2019/08/15/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象设计的六大设计原则"><a href="#面向对象设计的六大设计原则" class="headerlink" title="面向对象设计的六大设计原则"></a>面向对象设计的六大设计原则</h1><h2 id="开闭原则（Open-Close-Principle）"><a href="#开闭原则（Open-Close-Principle）" class="headerlink" title="开闭原则（Open Close Principle）"></a>开闭原则（Open Close Principle）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.</p></blockquote><h3 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h3><ul><li>用抽象构建框架，用实现扩展细节。</li><li>不以改动原有类的方式来实现新需求，而是应该以实现事先抽象出来的接口（或具体类继承抽象类）的方式来实现。</li></ul><h2 id="单一职责原则（Single-Responsibility-Principle）"><a href="#单一职责原则（Single-Responsibility-Principle）" class="headerlink" title="单一职责原则（Single Responsibility Principle）"></a>单一职责原则（Single Responsibility Principle）</h2><blockquote><p>A class should have a single responsibility, where a responsibility is nothing but a reason to change.</p></blockquote><h3 id="解读-1"><a href="#解读-1" class="headerlink" title="解读"></a>解读</h3><ul><li><p>类职责的变化往往就是导致类变化的原因：也就是说如果一个类具有多种职责，就会有多种导致这个类变化的原因，从而导致这个类的维护变得困难。</p></li><li><p>往往在软件开发中随着需求的不断增加，可能会给原来的类添加一些本来不属于它的一些职责，从而违反了单一职责原则。如果我们发现当前类的职责不仅仅有一个，就应该将本来不属于该类真正的职责分离出去。</p></li><li><p>不仅仅是类，函数（方法）也要遵循单一职责原则，即：一个函数（方法）只做一件事情。如果发现一个函数（方法）里面有不同的任务，则需要将不同的任务以另一个函数（方法）的形式分离出去。</p></li></ul><h2 id="依赖倒置原则（Dependency-Inversion-Principle）"><a href="#依赖倒置原则（Dependency-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependency Inversion Principle）"></a>依赖倒置原则（Dependency Inversion Principle）</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><blockquote><p>Depend upon Abstractions. Do not depend upon concretions.<br>Abstractions should not depend upon details. Details should depend upon abstractions<br>High-level modules should not depend on low-level modules. Both should depend on abstractions.</p></blockquote><h3 id="解读-2"><a href="#解读-2" class="headerlink" title="解读"></a>解读</h3><ul><li>针对接口编程，而不是针对实现编程。</li><li>尽量不要从具体的类派生，而是以继承抽象类或实现接口来实现。</li><li>关于高层模块与低层模块的划分可以按照决策能力的高低进行划分。业务层自然就处于上层模块，逻辑层和数据层自然就归类为底层。</li></ul><h2 id="接口分离原则（Interface-Segregation-Principle）"><a href="#接口分离原则（Interface-Segregation-Principle）" class="headerlink" title="接口分离原则（Interface Segregation Principle）"></a>接口分离原则（Interface Segregation Principle）</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><blockquote><p>Many client specific interfaces are better than one general purpose interface.</p></blockquote><h3 id="解读-3"><a href="#解读-3" class="headerlink" title="解读"></a>解读</h3><ul><li>客户端不应该依赖它不需要实现的接口。</li><li>不建立庞大臃肿的接口，应尽量细化接口，接口中的方法应该尽量少。</li></ul><h2 id="迪米特法则（Law-of-Demeter）"><a href="#迪米特法则（Law-of-Demeter）" class="headerlink" title="迪米特法则（Law of Demeter）"></a>迪米特法则（Law of Demeter）</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><blockquote><p>You only ask for objects which you directly need.</p></blockquote><h3 id="解读-4"><a href="#解读-4" class="headerlink" title="解读"></a>解读</h3><ul><li>迪米特法则也叫做最少知道原则（Least Know Principle）， 一个类应该只和它的成员变量，方法的输入，返回参数中的类作交流，而不应该引入其他的类（间接交流）。</li></ul><h2 id="里氏替换原则（Liskov-Substitution-Principle）"><a href="#里氏替换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏替换原则（Liskov Substitution Principle）"></a>里氏替换原则（Liskov Substitution Principle）</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><blockquote><p>In a computer program, if S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e. an object of type T may be substituted with any object of a subtype S) without altering any of the desirable properties of the program (correctness, task performed, etc.)</p></blockquote><h3 id="解读-5"><a href="#解读-5" class="headerlink" title="解读"></a>解读</h3><ul><li>在继承体系中，子类中可以增加自己特有的方法，也可以实现父类的抽象方法，但是不能重写父类的非抽象方法，否则该继承关系就不是一个正确的继承关系。</li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><a href="https://github.com/Jximing/designpattern/blob/master/adapter/readme.md" target="_blank" rel="noopener">适配器模式</a></p><p><a href="https://github.com/Jximing/designpattern/blob/master/Command/readme.md" target="_blank" rel="noopener">命令模式</a></p><p><a href="https://github.com/Jximing/designpattern/blob/master/compositeanditerator/readme.md" target="_blank" rel="noopener">组合模式</a></p><p><a href="https://github.com/Jximing/designpattern/blob/master/decorator/readme.md" target="_blank" rel="noopener">装饰模式</a></p><p><a href="https://github.com/Jximing/designpattern/blob/master/factory/readme.md" target="_blank" rel="noopener">工厂模式</a></p><p><a href="https://github.com/Jximing/designpattern/blob/master/observer/readme.md" target="_blank" rel="noopener">观察者模式</a></p><p><a href="https://github.com/Jximing/designpattern/blob/master/strategy/readme.md" target="_blank" rel="noopener">策略模式</a></p><p><a href="https://github.com/Jximing/designpattern/blob/master/templatemethod/readme.md" target="_blank" rel="noopener">模板模式</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>designpattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>designpattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解jvm第二章</title>
    <link href="/2019/03/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2019/03/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="学习目的"><a href="#学习目的" class="headerlink" title="学习目的"></a>学习目的</h2><pre><code>明白虚拟机中内存如何划分的，哪部分区域，什么样的代码和操作可能导致内存溢出异常。了解各个区域出现内存溢出异常的原因。</code></pre><h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><pre><code>  Java虚拟机所管理的内存将会包括下面几个运行时数据区域。</code></pre><p><img src="/2019/03/28/深入理解jvm第二章/img1.png" srcset="/img/loading.gif" alt="image-20190312024033766"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><blockquote><p>程序计数器是一块较小的内存空间，它的作用可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p></blockquote><ul><li>特性<ul><li>因为处理器在一个确定是时刻只会执行一个线程中的指令，线程切换后，是通过计数器来记录执行痕迹的，因而可以看出，程序计数器是每个线程私有的。</li><li>如果执行的是java方法，那么记录的是正在执行的虚拟机字节码指令的地址的地址，如果是native方法，计数器的值为空（undefined）。(native 方法是通过调用系统指令来实现的，那系统是如何实现多线程的则 native 就是如何实现的)</li><li>这个内存区域是唯一一个在java虚拟界规范中没有规定任何OutOfMemoryError的情况的区域。</li></ul></li></ul><p>在我们程序运行过程中计数器中改变的只是值，而不会随着程序的运行需要更大的空间，也就不会发生溢出情况。</p><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><blockquote><p>Java虚拟机栈是线程私有的。它的生命周期和线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的时候会创建一个栈帧（stack frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。</p></blockquote><ul><li><strong>局部变量表</strong><ul><li><strong>局部变量表(Local Variable Table)</strong>是一组变量值存储空间，用于存放方法参数和方法内定义的局部变量。局部变量表的容量以变量槽(Variable Slot)为最小单位，Java虚拟机规范并没有定义一个槽所应该占用内存空间的大小，但是规定了一个槽应该可以存放一个32位以内的数据类型。</li><li>在Java程序编译为Class文件时,就在方法的Code属性中的max_locals数据项中确定了该方法所需分配的局部变量表的最大容量。(最大Slot数量)</li><li>一个局部变量可以保存一个类型为boolean、byte、char、short、int、float、reference和return Address 类型的数据。reference类型表示对一个对象实例的引用。</li><li>虚拟机通过索引定位的方法查找相应的局部变量，索引的范围是从0~局部变量表最大容量。如果Slot是32位的，则遇到一个64位数据类型的变量(如long或double型)，则会连续使用两个连续的Slot来存储。</li></ul></li><li><strong>操作数栈</strong><ul><li><strong>操作数栈(Operand Stack)</strong>也常称为操作栈，它是一个后入先出栈(LIFO)。同局部变量表一样，操作数栈的最大深度也在编译的时候写入到方法的Code属性的max_stacks数据项中。</li><li>操作数栈的每一个元素可以是任意Java数据类型，32位的数据类型占一个栈容量，64位的数据类型占2个栈容量,且在方法执行的任意时刻，操作数栈的深度都不会超过max_stacks中设置的最大值。</li><li>当一个方法刚刚开始执行时，其操作数栈是空的，随着方法执行和字节码指令的执行，会从局部变量表或对象实例的字段中复制常量或变量写入到操作数栈，再随着计算的进行将栈中元素出栈到局部变量表或者返回给方法调用者，也就是出栈/入栈操作。一个完整的方法执行期间往往包含多个这样出栈/入栈的过程。</li></ul></li><li><strong>动态连接</strong><ul><li>在一个class文件中，一个方法要调用其他方法，需要将这些方法的符号引用转化为其在内存地址中的直接引用，而符号引用存在于方法区中的运行时常量池。</li><li>Java虚拟机栈中，每个栈帧都包含一个指向运行时常量池中该栈所属方法的符号引用，持有这个引用的目的是为了支持方法调用过程中的<strong>动态连接(Dynamic Linking)</strong>。</li><li>这些符号引用一部分会在类加载阶段或者第一次使用时就直接转化为直接引用，这类转化称为<strong>静态解析</strong>。另一部分将在每次运行期间转化为直接引用，这类转化称为动态连接。</li></ul></li><li><strong>方法返回</strong><ul><li>如果当前方法正常完成，则根据当前方法返回的字节码指令，这时有可能会有返回值传递给方法调用者(调用它的方法)，或者无返回值。具体是否有返回值以及返回值的数据类型将根据该方法返回的字节码指令确定。</li><li>在方法退出后都需要返回到方法被调用的位置，程序才能继续执行，方法返回时可能需要在当前栈帧中保存一些信息，用来帮他恢复它的上层方法执行状态。一般来说，方法正常退出时，调用者的PC计数值可以作为返回地址，栈帧中可能保存此计数值。</li></ul></li></ul><p>局部变量表中的变量不可直接使用，如需使用必须通过相关指令将其加载至操作数栈中作为操作数使用。</p><p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展，动态扩展无法申请到足够的内存时，就会抛出OutOfMemoryError。</p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><blockquote><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。</p></blockquote><p><img src="/2019/03/28/深入理解jvm第二章/img2.png" srcset="/img/loading.gif" alt="image-20190312040738895"></p><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><ul><li><p>堆内存</p><ul><li>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。<br>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</li><li>堆内存模型：<br><img src="/2019/03/28/深入理解jvm第二章/img3.png" srcset="/img/loading.gif" alt="image-20190312043735200"></li></ul></li><li><p>GC 堆</p><p>Java 中的堆也是 GC 收集垃圾的主要区域。GC 分为两种：Minor GC、Full GC ( 或称为 Major GC )。</p><ul><li><p>Minor GC 是发生在新生代中的垃圾收集动作，所采用的是复制算法。（存活的对象从一块空间复制到另外一块空间，再把原先的那块内存清理干净）</p><ul><li><p>在只有一个 Survivor 的情况下，总体上看在新生代空间满一半的时候就会触发一次 Minor GC 。我们可以设两个 Survivor 空间（ From Survivor 和 To Survivor ）。比如，我们把 Eden : From Survivor : To Survivor 空间大小设成 8 : 1 : 1 ，对象总是在 Eden 区出生， From Survivor 保存当前的幸存对象， To Survivor 为空。一次 gc 发生后：</p><ul><li>Eden 区活着的对象 ＋ From Survivor 存储的对象被复制到 To Survivor ；</li><li>清空 Eden 和 From Survivor ； 颠倒 From Survivor 和 To Survivor 的逻辑关系： </li><li>From 变 To ， To 变 From 。 </li></ul><p>这样只有在 Eden 空间快满的时候才会触发 Minor GC 。而 Eden 空间占新生代的绝大部分，所以Minor GC 的频率得以降低。</p></li><li><p>对象在 Survivor 区每熬过一次 Minor GC，就将对象的年龄 + 1，当对象的年龄达到某个值时 ( 默认是 15 岁，可以通过参数 -XX:MaxTenuringThreshold 来设定 )，这些对象就会成为老年代。</p></li></ul></li><li><p>Full GC 是发生在老年代的垃圾收集动作，所采用的是标记-清除算法。</p><ul><li>堆内存中的老年代(Old)不同于这个，老年代里面的对象几乎个个都是在 Survivor 区域中熬过来的，它们是不会那么容易就 “死掉” 了的。因此，Full GC 发生的次数不会有 Minor GC 那么频繁，并且做一次 Full GC 要比进行一次 Minor GC 的时间更长。</li></ul></li></ul></li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>在Java虚拟机中，方法区是可供各线程共享的运行时内存区域。</p><p>在不同的JDK版本中，方法区中存储的数据是不一样的。</p><p>在JDK1.6及之前，运行时常量池是方法区的一个部分，同时方法区里面存储了类的元数据信息、静态变量、即时编译器编译后的代码（比如spring 使用IOC或者AOP创建bean时，或者使用cglib，反射的形式动态生成class信息等）等。</p><p>在JDK1.7及以后，JVM已经将运行时常量池从方法区中移了出来，在JVM堆开辟了一块区域存放常量池。</p><p>HotSpot虚拟机在1.8之后已经取消了永久代，改为元空间，类的元信息被存储在元空间中。元空间没有使用堆内存，而是与堆不相连的本地内存区域。所以，理论上系统可以使用的内存有多大，元空间就有多大，所以不会出现永久代存在时的内存溢出问题。</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><ul><li>常量池（Constant Pool）：常量池数据编译期被确定，是Class文件中的一部分。存储了类、方法、接口等中的常量，当然也包括字符串常量。</li><li>字符串池/字符串常量池（String Pool/String Constant Pool）：是常量池中的一部分，存储编译期类中产生的字符串类型数据。</li><li>运行时常量池（Runtime Constant Pool）：方法区的一部分，所有线程共享。虚拟机加载Class后把常量池中的数据放入到运行时常量池。</li><li>Jdk1.8中将字符串常量池移到堆中</li></ul><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><ul><li>对象的创建过程<ul><li>对象所需要的大小在类加载完成后就可以确定。</li></ul></li></ul><p><img src="/2019/03/28/深入理解jvm第二章/img4.png" srcset="/img/loading.gif" alt="image-20190313002853143"></p><ul><li>对象的存放方式<br><img src="/2019/03/28/深入理解jvm第二章/img5.png" srcset="/img/loading.gif" alt="image-20190313003357920"></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>在那些区域有可能发生OutOfMemory;有可能是哪些原因导致的？</p></li><li><p>StackOverflow一般在什么情况下触发？</p></li><li><p>JDK1.8之后Perm Space有哪些变动</p></li><li><p>一个类中各个变量分别存储在内存的哪个区域中</p></li><li><p>堆和栈分别存什么</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>jvm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深入理解Java虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
